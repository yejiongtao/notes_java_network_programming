1. introduction
	provides an efficient, up-to-date, and feature-rich package implementing the client side of the most recent HTTP standards and recommendations
	HttpClient may be of interest to anyone building HTTP-aware client applications such as web browsers, web service clients, 
		or systems that leverage or extend the HTTP protocol for distributed communication
	based on HttpCore
		based on classic(blocking) I/O
	part of Apache HttpComponents

2. request execution
	http request
		All HTTP requests have a request line consisting a method name, a request URI and an HTTP protocol version.
		methods
			HTTP methods defined in the HTTP/1.1 specification:
				GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS
			HttpClient provides classes for each type
				HttpGet, HttpHead, HttpPost, HttpPut, HttpDelete, HttpTrace, HttpOptions.
		uri
			you can directly specify a URI
				HttpGet httpget = new HttpGet("http://www.google.com/search?hl=en&q=httpclient&btnG=Google+Search&aq=f&oq=");
			or use BUIBuilder to create a URI
				URI uri = new URIBuilder()
					.setScheme("http")
					.setHost("www.google.com")
					.setPath("/search")
					.setParameter("q", "httpclient")
					.setParameter("btnG", "Google Search")
					.setParameter("aq", "f")
					.setParameter("oq", "")
					.build();
				HttpGet httpget = new HttpGet(uri);
	http response
		a message sent by the server back to the client after having received and interpreted a request message
		The first line of that message consists of the protocol version, a numeric status code and its associated textual phrase
			System.out.println(response.getProtocolVersion());
			System.out.println(response.getStatusLine().getStatusCode());
			System.out.println(response.getStatusLine().getReasonPhrase());
	message header
		An HTTP message can contain a number of headers describing properties of the message such as the content length, content type and so on.
		HttpClient provides methods to retrieve, add, remove and enumerate headers
			HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, HttpStatus.SC_OK, "OK");
			response.addHeader("Set-Cookie", "c1=a; path=/; domain=localhost");			// add header
			response.addHeader("Set-Cookie", "c2=b; path=\"/\", c3=c; domain=\"localhost\"");
			Header h1 = response.getFirstHeader("Set-Cookie");					// get header
			Header h2 = response.getLastHeader("Set-Cookie");
			Header[] hs = response.getHeaders("Set-Cookie");
		HeaderIterator 
			HeaderIterator it = response.headerIterator("Set-Cookie");

			while (it.hasNext()) {
			    System.out.println(it.next());
			}
		HeaderElementIterator, to parse the message into individual deader elements
			HeaderElementIterator it = new BasicHeaderElementIterator(
			    response.headerIterator("Set-Cookie"));

			while (it.hasNext()) {
			    HeaderElement elem = it.nextElement(); 
			    System.out.println(elem.getName() + " = " + elem.getValue());
			    NameValuePair[] params = elem.getParameters();
			    for (int i = 0; i < params.length; i++) {
				System.out.println(" " + params[i]);
			    }
			}
		
		



