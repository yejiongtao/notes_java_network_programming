1. HttpClient interface
	you can custom a HttpClient instance
		CloseableHttpClient httpClient = HttpClients.custom()
			.setKeepAliveStrategy(keepAliveStrat)	// keepAliveStrat is an instance of your custom subclass of DefaultConnectionKeepAliveStrategy
			.build()
	HttpClient thread safety
		it's thread safe
		it's recommended that the same instance of this class is reused for multiple request executions
	resource deallocation
		CloseableHttpClient httpclient = HttpClients.createDefault();
		try {
		    <...>
		} finally {
		    httpclient.close();
		}

2. HTTP execution context
	Originally HTTP has been designed as a stateless, response-request oriented protocol
		but real world apps often need to be able to ersist state information through several logically related request-response exchanges
		HttpContext allows this
			which is a collection of arbitrary key-value pairs
			it can contain arbitraty objects so it may be unsafe to share between threads
				so it's recommended that each thread of execution maintains its own context
	you can use HttpClientContext to simplify interactions with the context state	
		HttpContext context = <...>		// for example, you save the HttpHost, HttpRequest, etc
		HttpClientContext clientContext = HttpClientContext.adapt(context);
		HttpHost target = clientContext.getTargetHost();
		HttpRequest request = clientContext.getRequest();
		HttpResponse response = clientContext.getResponse();
		RequestConfig config = clientContext.getRequestConfig();
		
		// and then you use the context when executing a request
		CloseableHttpResponse response1 = httpclient.execute(httpget1, context);

3. HTTP protocol interceptors
	used to do things to contexts, headers, or entities before sending, or after receiving
	for example
		CloseableHttpClient httpclient = HttpClients.custom()
			.addInterceptorLast(new HttpRequestInterceptor() {

			    public void process(final HttpRequest request, final HttpContext context) throws HttpException, IOException {
				AtomicInteger count = (AtomicInteger) context.getAttribute("count");
				request.addHeader("Count", Integer.toString(count.getAndIncrement()));
			    }
			})
			.build();
		AtomicInteger count = new AtomicInteger(1);
		HttpClientContext localContext = HttpClientContext.create();
		localContext.setAttribute("count", count);

		HttpGet httpget = new HttpGet("http://localhost/");		// you just do things as usual, and things process will be done before execting
		for (int i = 0; i < 10; i++) {
		    CloseableHttpResponse response = httpclient.execute(httpget, localContext);
		    try {
			HttpEntity entity = response.getEntity();
		    } finally {
			response.close();
		    }
		}

4. exception handling
	HTTP protocol processors can throw two types of exceptions: 
		java.io.IOException in case of an I/O failure such as socket timeout or an socket reset
			are considered non-fatal and recoverable
		HttpException that signals an HTTP failure such as a violation of the HTTP protocol
			are considered fatal and cannot be automatically recovered from
	By default HttpClient attempts to automatically recover from I/O exceptions
		HttpClient will make no attempt to recover from any logical or HTTP protocol errors (those derived from HttpException class).
		HttpClient will automatically retry those methods that are assumed to be idempotent.
		HttpClient will automatically retry those methods that fail with a transport exception while the HTTP request is still being transmitted to the target server (i.e. the request has not been fully transmitted to the server).
	you can define your own request retry handler, 
		HttpRequestRetryHandler myRetryHandler = new HttpRequestRetryHandler() {

		    public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {
			if (executionCount >= 5) {
			    // Do not retry if over max retry count
			    return false;
			}
			if (exception instanceof InterruptedIOException) {
			    // Timeout
			    return false;
			}
			if (exception instanceof UnknownHostException) {
			    // Unknown host
			    return false;
			}
			if (exception instanceof ConnectTimeoutException) {
			    // Connection refused
			    return false;
			}
			if (exception instanceof SSLException) {
			    // SSL handshake exception
			    return false;
			}
			HttpClientContext clientContext = HttpClientContext.adapt(context);
			HttpRequest request = clientContext.getRequest();
			boolean idempotent = !(request instanceof HttpEntityEnclosingRequest);
			if (idempotent) {
			    // Retry if the request is considered idempotent
			    return true;
			}
			return false;
		    }
		};
		CloseableHttpClient httpclient = HttpClients.custom()
			.setRetryHandler(myRetryHandler)
			.build();

5. aborting requests
	HTTP requests being executed by HttpClient can be aborted at any stage of execution by invoking HttpUriRequest#abort() method
	This method is thread-safe and can be called from any thread
	When an HTTP request is aborted its execution thread - even if currently blocked in an I/O operation - is guaranteed to unblock by throwing a InterruptedIOException

6. redirect handling
	pass

