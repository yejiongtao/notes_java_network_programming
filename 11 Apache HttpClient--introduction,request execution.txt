1. introduction
	provides an efficient, up-to-date, and feature-rich package implementing the client side of the most recent HTTP standards and recommendations
	HttpClient may be of interest to anyone building HTTP-aware client applications such as web browsers, web service clients, 
		or systems that leverage or extend the HTTP protocol for distributed communication
	based on HttpCore
		based on classic(blocking) I/O
	part of Apache HttpComponents

2. request execution
	http request
		All HTTP requests have a request line consisting a method name, a request URI and an HTTP protocol version.
		methods
			HTTP methods defined in the HTTP/1.1 specification:
				GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS
			HttpClient provides classes for each type
				HttpGet, HttpHead, HttpPost, HttpPut, HttpDelete, HttpTrace, HttpOptions.
		uri
			you can directly specify a URI
				HttpGet httpget = new HttpGet("http://www.google.com/search?hl=en&q=httpclient&btnG=Google+Search&aq=f&oq=");
			or use BUIBuilder to create a URI
				URI uri = new URIBuilder()
					.setScheme("http")
					.setHost("www.google.com")
					.setPath("/search")
					.setParameter("q", "httpclient")
					.setParameter("btnG", "Google Search")
					.setParameter("aq", "f")
					.setParameter("oq", "")
					.build();
				HttpGet httpget = new HttpGet(uri);
	http response
		a message sent by the server back to the client after having received and interpreted a request message
		The first line of that message consists of the protocol version, a numeric status code and its associated textual phrase
			System.out.println(response.getProtocolVersion());
			System.out.println(response.getStatusLine().getStatusCode());
			System.out.println(response.getStatusLine().getReasonPhrase());
	message header
		An HTTP message can contain a number of headers describing properties of the message such as the content length, content type and so on.
		HttpClient provides methods to retrieve, add, remove and enumerate headers
			HttpResponse response = new BasicHttpResponse(HttpVersion.HTTP_1_1, HttpStatus.SC_OK, "OK");
			response.addHeader("Set-Cookie", "c1=a; path=/; domain=localhost");			// add header
			response.addHeader("Set-Cookie", "c2=b; path=\"/\", c3=c; domain=\"localhost\"");
			Header h1 = response.getFirstHeader("Set-Cookie");					// get header
			Header h2 = response.getLastHeader("Set-Cookie");
			Header[] hs = response.getHeaders("Set-Cookie");
		HeaderIterator 
			HeaderIterator it = response.headerIterator("Set-Cookie");

			while (it.hasNext()) {
			    System.out.println(it.next());
			}
		HeaderElementIterator, to parse the message into individual deader elements
			HeaderElementIterator it = new BasicHeaderElementIterator(
			    response.headerIterator("Set-Cookie"));

			while (it.hasNext()) {
			    HeaderElement elem = it.nextElement(); 
			    System.out.println(elem.getName() + " = " + elem.getValue());
			    NameValuePair[] params = elem.getParameters();
			    for (int i = 0; i < params.length; i++) {
				System.out.println(" " + params[i]);
			    }
			}
	http entity
		HTTP messages can optionally carry a content entity associated with the request or response
			POST and PUT are two entity enclosing request methods
			Responses are usually expected to enclose a content entity, but there are exceptions, e.g. responses to HEAD method
		you can create an entity for an outgoing message
			StringEntity myEntity = new StringEntity("important message", 
				ContentType.create("text/plain", "UTF-8"));
		manage the entities
			System.out.println(myEntity.getContentType());		// read the Content-Type header, null if not available
			System.out.println(myEntity.getContentLength());	// read the Content-Length header, -1 if not available
			System.out.println(EntityUtils.toString(myEntity));
			System.out.println(EntityUtils.toByteArray(myEntity).length);

		read content from an entity
			retrieve the input stream via the HttpEntity#getContent() method, 
				which returns an java.io.InputStream
			or supply an output stream to the HttpEntity#writeTo(OutputStream) method, 
				which will return once all content has been written to the given stream
		
	ensuring release of low level resources
		two different ways to release system resources
			close the content stream associated with the entity
				which attempts to keep the underlying connection alive by consuming the entity content
				so the connection can be reused
			close the response
				immediately shuts down and discards the connection
					try {
					    HttpEntity entity = response.getEntity();
					    if (entity != null) {
						InputStream instream = entity.getContent();
						try {
						    // do something useful
						} finally {
						    instream.close();
						}
					    }
					} finally {
					    response.close();
					}
	use EntityUtils to consume the entity
		strongly discouraged unless the response entities originate from a trusted HTTP server and are known to be of limited length
		the recommended way is using its HttpEntity#getContent() or HttpEntity#writeTo(OutputStream) methods
			    if (entity != null) {
				long len = entity.getContentLength();
				if (len != -1 && len < 2048) {
				    System.out.println(EntityUtils.toString(entity));
				} else {
				    // Stream content out
				}
			    }
		sometimes you need to read the entity content more than once
			in which case you buffer the entity in the memory via wrapping it into a BufferedHttpEntity
				HttpEntity entity = response.getEntity();
				if (entity != null) {
				    entity = new BufferedHttpEntity(entity);
				}

	producing entity content
		StringEntity, ByteArrayEntity, InputStreamEntity, and FileEntity
			classes for most common data containers such as string, byte array, input stream and file
				File file = new File("somefile.txt");
				FileEntity entity = new FileEntity(file, 
				    ContentType.create("text/plain", "UTF-8"));        

				HttpPost httppost = new HttpPost("http://localhost/action.do");
				httppost.setEntity(entity);
			note InputStreamEntity is not repeatable, because it can only read from the underlying data stream once
		URL encoding to create URL with parameters
			List<NameValuePair> formparams = new ArrayList<NameValuePair>();
			formparams.add(new BasicNameValuePair("param1", "value1"));
			formparams.add(new BasicNameValuePair("param2", "value2"));
			UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, Consts.UTF_8);
			HttpPost httppost = new HttpPost("http://localhost/handler.do");
			httppost.setEntity(entity);
	reponse handlers 
		Use the ResponseHandler interface, override the handleResponse(HttpResponse reponse) method to handle reponses
			using a ResponseHandler, HttpClient will automatically take care of ensuring release of the connection back to the connection manager regardless whether the request execution succeeds or causes an exception
		sample 
			CloseableHttpClient httpclient = HttpClients.createDefault();
			HttpGet httpget = new HttpGet("http://localhost/json");

			ResponseHandler<MyJsonObject> rh = new ResponseHandler<MyJsonObject>() {

			    @Override
			    public JsonObject handleResponse(
				    final HttpResponse response) throws IOException {
				StatusLine statusLine = response.getStatusLine();
				HttpEntity entity = response.getEntity();
				if (statusLine.getStatusCode() >= 300) {
				    throw new HttpResponseException(
					    statusLine.getStatusCode(),
					    statusLine.getReasonPhrase());
				}
				if (entity == null) {
				    throw new ClientProtocolException("Response contains no content");
				}
				Gson gson = new GsonBuilder().create();
				ContentType contentType = ContentType.getOrDefault(entity);
				Charset charset = contentType.getCharset();
				Reader reader = new InputStreamReader(entity.getContent(), charset);
				return gson.fromJson(reader, MyJsonObject.class);
			    }
			};
			MyJsonObject myjson = client.execute(httpget, rh);
					

